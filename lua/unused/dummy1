set number
set termguicolors

" these two lines are needed to set the tab width in nvim
set shiftwidth=0
set tabstop=4

" menuone - popup even when there's only one match
" noinsert - do not insert text until a selection is made
" noselect: do not select, force user to select one from the menu
set completeopt=menuone,noinsert,noselect

" set line numbers for NerdTree directory opening
let g:NERDTreeShowLineNumbers = get(g:, 'NERDTreeShowLineNumbers', 1) 

" removes annoying prompts about a swap file being detected and what to do
" about that
set shortmess+=A

colorscheme gruvbox 
" for packer.nvim plugin manager
lua require('plugins')
" lua require('rust-analyzer')
" lua require('border')
lua require('completion-config')
lua require('lua-lsp')
lua require('autopairs')

" autoformat rust files on save
autocmd BufWritePre *.rs lua vim.lsp.buf.formatting_sync(nil, 1000)
autocmd BufWritePre *.lua lua vim.lsp.buf.formatting_sync(nil, 100)
" require('formatter').setup()
" nnoremap <silent> <leader>f :Format<CR>

" vim.api.nvim_exec([[
" augroup FormatAutogroup
"   autocmd!
"   autocmd BufWritePost *.js,*.rs,*.lua FormatWrite
" augroup END
" ]], true)


lua require'lspconfig'.rust_analyzer.setup({})
lua require'colorizer'.setup()

" set 'space + e' mapping for file explorer shortcut
nnoremap <space>e :NERDTreeToggle<CR>
nnoremap <space>f :Denite file/rec<CR>

" Open terminal
" nnoremap <Leader>at :call FloatTerm()<CR>


" function! FloatTerm(...)
"   " Configuration
"   let height = float2nr((&lines - 2) * 0.6)
"   let row = float2nr((&lines - height) / 2)
"   let width = float2nr(&columns * 0.6)
"   let col = float2nr((&columns - width) / 2)
"   " Border Window
"   let border_opts = {
"         \ 'relative': 'editor',
"         \ 'row': row - 1,
"         \ 'col': col - 2,
"         \ 'width': width + 4,
"         \ 'height': height + 2,
"         \ 'style': 'minimal'
"         \ }
"   " Terminal Window
"   let opts = {
"         \ 'relative': 'editor',
"         \ 'row': row,
"         \ 'col': col,
"         \ 'width': width,
"         \ 'height': height,
"         \ 'style': 'minimal'
"         \ }
"   let top = "╭" . repeat("─", width + 2) . "╮"
"   let mid = "│" . repeat(" ", width + 2) . "│"
"   let bot = "╰" . repeat("─", width + 2) . "╯"
"   let lines = [top] + repeat([mid], height) + [bot]
"   let bbuf = nvim_create_buf(v:false, v:true)
"   call nvim_buf_set_lines(bbuf, 0, -1, v:true, lines)
"   let s:float_term_border_win = nvim_open_win(bbuf, v:true, border_opts)
"   let buf = nvim_create_buf(v:false, v:true)
"   let s:float_term_win = nvim_open_win(buf, v:true, opts)
"   " Styling
"   hi FloatWinBorder guifg=#87bb7c
"   call setwinvar(s:float_term_border_win, '&winhl', 'Normal:FloatWinBorder')
"   call setwinvar(s:float_term_win, '&winhl', 'Normal:Normal')
"   if a:0 == 0
"     terminal
"   else
"     call termopen(a:1)
"   endif
"   startinsert
"   " Close border window when terminal window close
"   autocmd TermClose * ++once :bd! | call nvim_win_close(s:float_term_border_win, v:true)
" endfunction



" denite configurations
try
" === Denite setup ==="
" Use ripgrep for searching current directory for files
" By default, ripgrep will respect rules in .gitignore
"   --files: Print each file that would be searched (but don't search)
"   --glob:  Include or exclues files for searching that match the given glob
"            (aka ignore .git files)
"
call denite#custom#var('file/rec', 'command', ['rg', '--files', '--glob', '!.git'])

" Use ripgrep in place of "grep"
call denite#custom#var('grep', 'command', ['rg'])

" Custom options for ripgrep
"   --vimgrep:  Show results with every match on it's own line
"   --hidden:   Search hidden directories and files
"   --heading:  Show the file name above clusters of matches from each file
"   --S:        Search case insensitively if the pattern is all lowercase
call denite#custom#var('grep', 'default_opts', ['--hidden', '--vimgrep', '--heading', '-S'])

" Recommended defaults for ripgrep via Denite docs
call denite#custom#var('grep', 'recursive_opts', [])
call denite#custom#var('grep', 'pattern_opt', ['--regexp'])
call denite#custom#var('grep', 'separator', ['--'])
call denite#custom#var('grep', 'final_opts', [])

" Remove date from buffer list
call denite#custom#var('buffer', 'date_format', '')

" search the directory and its subdirectories for files with matching text
call denite#custom#alias('source', 'grep/txt', 'grep')
call denite#custom#var('grep/txt', { 'command': ['grep'], 'default_opts': ['-inH'], 'recursive_opts': ['-r', '--include=*.txt', '--exclude=.git'], 'pattern_opt': ['-e'], 'separator': ['--'], 'final_opts': []})
nnoremap <F9> :Denite -path='C:\path with spaces' -start-filter -sorters=sorter/lastmod grep/txt:::!<CR>


" Custom options for Denite
"   split                       - Use floating window for Denite
"   start_filter                - Start filtering on default
"   auto_resize                 - Auto resize the Denite window height automatically.
"   source_names                - Use short long names if multiple sources
"   prompt                      - Customize denite prompt
"   highlight_matched_char      - Matched characters highlight
"   highlight_matched_range     - matched range highlight
"   highlight_window_background - Change background group in floating window
"   highlight_filter_background - Change background group in floating filter window
"   winrow                      - Set Denite filter window to top
"   vertical_preview            - Open the preview window vertically


let s:denite_options = {'default' : {
\ 'split': 'floating',
\ 'floating_border': 'double',
\ 'start_filter': 1,
\ 'auto_resize': 1,
\ 'source_names': 'short',
\ 'prompt': '道',
\ 'highlight_matched_char': 'QuickFixLine',
\ 'highlight_matched_range': 'Visual',
\ 'highlight_filter_background': 'DiffAdd',
\ 'winwidth': &columns,
\ 'vertical_preview': 1
\ 'winheight': 100,
\ }}

" Alternate Options
" \ 'highlight_window_background': 'DiffAdd',
" \ 'floating_preview': 1,
" \ 'highlight_preview_line': 'Cursor',
" \ 'highlight_prompt': 'ColorColumn',
" \ 'match_highlight': 'DiffAdd',

" Loop through denite options and enable them
function! s:profile(opts) abort
  for l:fname in keys(a:opts)
    for l:dopt in keys(a:opts[l:fname])
      call denite#custom#option(l:fname, l:dopt, a:opts[l:fname][l:dopt])
    endfor
  endfor
endfunction

call s:profile(s:denite_options)
catch
  echo 'Denite not installed. It should work after running :PlugInstall'
endtry


autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings() abort
  nnoremap <silent><buffer><expr> <CR>
  \ denite#do_map('do_action')
  nnoremap <silent><buffer><expr> d
  \ denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> p
  \ denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> q
  \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> i
  \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <Space>
  \ denite#do_map('toggle_select').'j'
endfunction

 autocmd User denite-preview call s:denite_preview()
 	function! s:denite_preview() abort
 	  setlocal number
 	endfunction
